

#include <cstdlib>
#include <cmath>
#include <iostream>
#include <cstring>
#include <unistd.h>

///////////////////////// MACRO SUPPORT ////////////////////////////////

#define max(x, y) (((x) > (y)) ? (x) : (y))
#define min(x, y) (((x) < (y)) ? (x) : (y))

////////////////////////////// LOCAL INCLUDES //////////////////////////

#include "Xgain.h"        // define struct PortIndex
#include "gain.cc"        // dsp class generated by faust -> dsp2cc

////////////////////////////// PLUG-IN CLASS ///////////////////////////

namespace gain {

class Xgain
{
private:
  // pointer to buffer
  float*          output;
  float*          input;
  // pointer to dsp class
  Dsp*            gain;

  // bypass ramping
  float*          bypass;
  uint32_t        bypass_;
 
  bool            needs_ramp_down;
  bool            needs_ramp_up;
  float           ramp_down;
  float           ramp_up;
  float           ramp_up_step;
  float           ramp_down_step;
  bool            bypassed;

  // private functions
  inline void run_dsp_(uint32_t n_samples);
  inline void connect_(uint32_t port,void* data);
  inline void init_dsp_(uint32_t rate);
  inline void connect_all__ports(uint32_t port, void* data);
  inline void activate_f();
  inline void clean_up();
  inline void deactivate_f();

public:
  // LV2 Descriptor
  static const LV2_Descriptor descriptor;
  // static wrapper to private functions
  static void deactivate(LV2_Handle instance);
  static void cleanup(LV2_Handle instance);
  static void run(LV2_Handle instance, uint32_t n_samples);
  static void activate(LV2_Handle instance);
  static void connect_port(LV2_Handle instance, uint32_t port, void* data);
  static LV2_Handle instantiate(const LV2_Descriptor* descriptor,
                                double rate, const char* bundle_path,
                                const LV2_Feature* const* features);
  Xgain();
  ~Xgain();
};

// constructor
Xgain::Xgain() :
  output(NULL),
  input(NULL),
  gain(gain::plugin()),
  bypass(0),
  bypass_(2),
  needs_ramp_down(false),
  needs_ramp_up(false),
  bypassed(false) {};

// destructor
Xgain::~Xgain()
{
  // delete DSP class
  gain->del_instance(gain);
};

///////////////////////// PRIVATE CLASS  FUNCTIONS /////////////////////

void Xgain::init_dsp_(uint32_t rate)
{
  // set values for internal ramping
  ramp_down_step = 32 * (256 * rate) / 48000; 
  ramp_up_step = ramp_down_step;
  ramp_down = ramp_down_step;
  ramp_up = 0.0;

  gain->init_static(rate, gain); // init the DSP class
}

// connect the Ports used by the plug-in class
void Xgain::connect_(uint32_t port,void* data)
{
  switch ((PortIndex)port)
    {
    case EFFECTS_OUTPUT:
      output = static_cast<float*>(data);
      break;
    case EFFECTS_INPUT:
      input = static_cast<float*>(data);
      break;
    case BYPASS: 
      bypass = static_cast<float*>(data); // , 0.0, 0.0, 1.0, 1.0 
      break;
    default:
      break;
    }
}

void Xgain::activate_f()
{
  // allocate the internal DSP mem
}

void Xgain::clean_up()
{
  // delete the internal DSP mem
}

void Xgain::deactivate_f()
{
  // delete the internal DSP mem
  gain->clear_state_f_static(gain);
}

void Xgain::run_dsp_(uint32_t n_samples)
{
  if(n_samples<1) return;
  float buf[n_samples];
  // do inplace processing on default
  memcpy(output, input, n_samples*sizeof(float));
  // check if bypass is pressed
  if (bypass_ != static_cast<uint32_t>(*(bypass))) {
    bypass_ = static_cast<uint32_t>(*(bypass));
    if (!bypass_) {
      needs_ramp_down = true;
      needs_ramp_up = false;
    } else {
      needs_ramp_down = false;
      needs_ramp_up = true;
      bypassed = false;
    }
  }

  if (needs_ramp_down || needs_ramp_up) {
       memcpy(buf, input, n_samples*sizeof(float));
  }
  
  if (!bypassed) {
     gain->compute_static(static_cast<int>(n_samples), output, output, gain);
  }

  // check if ramping is needed
  if (needs_ramp_down) {
    float fade = 0;
    for (uint32_t i=0; i<n_samples; i++) {
      if (ramp_down >= 0.0) {
        --ramp_down; 
      }
      fade = max(0.0,ramp_down) /ramp_down_step ;
      output[i] = output[i] * fade + buf[i] * (1.0 - fade);
    }

    if (ramp_down <= 0.0) {
      // when ramped down, clear buffer from gain class
      gain->clear_state_f_static(gain);
      needs_ramp_down = false;
      bypassed = true;
      ramp_down = ramp_down_step;
      ramp_up = 0.0;
    } else {
      ramp_up = ramp_down;
    }

  } else if (needs_ramp_up) {
    float fade = 0;
    for (uint32_t i=0; i<n_samples; i++) {
      if (ramp_up < ramp_up_step) {
        ++ramp_up ;
      }
      fade = min(ramp_up_step,ramp_up) /ramp_up_step ;
      output[i] = output[i] * fade + buf[i] * (1.0 - fade);
    }

    if (ramp_up >= ramp_up_step) {
      needs_ramp_up = false;
      ramp_up = 0.0;
      ramp_down = ramp_down_step;
    } else {
      ramp_down = ramp_up;
    }
  }

}

void Xgain::connect_all__ports(uint32_t port, void* data)
{
  // connect the Ports used by the plug-in class
  connect_(port,data); 
  // connect the Ports used by the DSP class
  gain->connect_static(port,  data, gain);
}

////////////////////// STATIC CLASS  FUNCTIONS  ////////////////////////

LV2_Handle 
Xgain::instantiate(const LV2_Descriptor* descriptor,
                            double rate, const char* bundle_path,
                            const LV2_Feature* const* features)
{
  // init the plug-in class
  Xgain *self = new Xgain();
  if (!self) {
    return NULL;
  }

  self->init_dsp_((uint32_t)rate);

  return (LV2_Handle)self;
}

void Xgain::connect_port(LV2_Handle instance, 
                                   uint32_t port, void* data)
{
  // connect all ports
  static_cast<Xgain*>(instance)->connect_all__ports(port, data);
}

void Xgain::activate(LV2_Handle instance)
{
  // allocate needed mem
  static_cast<Xgain*>(instance)->activate_f();
}

void Xgain::run(LV2_Handle instance, uint32_t n_samples)
{
  // run dsp
  static_cast<Xgain*>(instance)->run_dsp_(n_samples);
}

void Xgain::deactivate(LV2_Handle instance)
{
  // free allocated mem
  static_cast<Xgain*>(instance)->deactivate_f();
}

void Xgain::cleanup(LV2_Handle instance)
{
  // well, clean up after us
  Xgain* self = static_cast<Xgain*>(instance);
  self->clean_up();
  delete self;
}

const LV2_Descriptor Xgain::descriptor =
{
  PLUGIN_URI ,
  Xgain::instantiate,
  Xgain::connect_port,
  Xgain::activate,
  Xgain::run,
  Xgain::deactivate,
  Xgain::cleanup,
  NULL
};


} // end namespace gain

////////////////////////// LV2 SYMBOL EXPORT ///////////////////////////

extern "C"
LV2_SYMBOL_EXPORT
const LV2_Descriptor*
lv2_descriptor(uint32_t index)
{
  switch (index)
    {
    case 0:
      return &gain::Xgain::descriptor;
    default:
      return NULL;
    }
}

///////////////////////////// FIN //////////////////////////////////////
